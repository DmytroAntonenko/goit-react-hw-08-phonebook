{"version":3,"file":"static/js/781.379b9fa9.chunk.js","mappings":"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","sources":["components/RegisterForm/RegistrForm.jsx","pages/Register/Register.jsx","../node_modules/@chakra-ui/form-control/dist/chunk-WFX3T3Z6.mjs"],"sourcesContent":["import PropTypes from 'prop-types';\n\nimport { useDispatch } from 'react-redux';\nimport { Formik, Form, Field } from 'formik';\nimport * as yup from 'yup';\nimport {\n  Button,\n  Input,\n  FormErrorMessage,\n  Box,\n  Flex,\n  FormControl,\n  FormHelperText,\n} from '@chakra-ui/react';\n\nimport { register } from 'redux/auth/operation';\n\nconst initialValues = {\n    name: '',\n    email: '',\n    password: ''\n};\n\nconst schema = yup.object().shape({\n    name: yup.string().required(),\n    email: yup.string().email().required(),\n    password: yup.string().required(),\n});\n\nconst RegistrForm = () => {\n    const dispatch = useDispatch();\n\n    const handleSubmit = (values, { resetForm }) => {\n        dispatch(register(values));\n        resetForm();\n    };\n\n  return (\n    <Flex direction='column'\n        align='center'\n        w={380} h={300} p={3}\n        border={2}\n        borderColor='#2D3748'\n        backgroundColor='#9fa2a6'\n        borderStyle='solid'\n        borderRadius={10}\n    >\n        <Formik\n            initialValues={initialValues}\n            validationSchema={schema}\n            onSubmit={handleSubmit}\n        >\n            {(props) => (\n                <Form>\n                    <Field type='text' name='name' required>\n                        {({ field, form }) => (\n                            <FormControl isInvalid={form.errors.name}>\n                                <Input {...field}\n                                    autoComplete='off'\n                                    color='#2D3748'\n                                    backgroundColor='#EDF2F7'\n                                    borderColor='#2D3748'\n                                    placeholder='Name'\n                                    _placeholder={{ opacity: 0.4, color: '#2D3748' }}\n                                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                                />\n                                <Box h='35px' w={355}>\n                                    {form.values.name !== '' ? (\n                                    <FormHelperText color='#FFFFF0' fontSize={7}>\n                                        Name may contain only letters, apostrophe, dash and spaces.\n                                        For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\n                                    </FormHelperText>) : null}\n                                    <FormErrorMessage fontSize={7} color='red'>\n                                        Name is required\n                                    </FormErrorMessage>\n                                </Box>\n                            </FormControl>\n                        )}\n                    </Field>\n                    <Field type='email' name='email' required>\n                        {({ field, form }) => (\n                            <FormControl isInvalid={form.errors.name}>\n                                <Input {...field} \n                                    autoComplete='off'\n                                    color='#2D3748'\n                                    backgroundColor='#EDF2F7'\n                                    borderColor='#2D3748'\n                                    placeholder='Email'\n                                    _placeholder={{ opacity: 0.4, color: '#2D3748' }}\n                                    pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$\"\n                                />\n                                <Box h='35px' w={355}>\n                                    {form.values.email !== '' ? (\n                                    <FormHelperText fontSize={7} color='#FFFFF0'>\n                                        Email must be a valid email address\n                                    </FormHelperText>) : null}\n                                    <FormErrorMessage fontSize={7} color='red'>Email is required</FormErrorMessage>\n                                </Box>\n                            </FormControl>\n                        )}\n                    </Field>\n                    <Field type='password' name='password' required>\n                        {({ field, form }) => (\n                                <FormControl isInvalid={form.errors.name}>\n                                <Input {...field}\n                                    borderColor='#2D3748'\n                                    backgroundColor='#EDF2F7'\n                                    autoComplete='off'\n                                    placeholder='Password' color='#2D3748'\n                                    _placeholder={{ opacity: 0.4, color: '#2D3748' }}\n                                />\n                                    <Box h={25} w={355}>\n                                        <FormErrorMessage fontSize={7} color='red'>Password is required</FormErrorMessage>\n                                    </Box>\n                                </FormControl>\n                            )\n                        }\n                    </Field>\n                    <Button \n                    w={100}\n                    fontWeight='bold'\n                    type='submit'\n                    name='Register'\n                    display=\"block\"\n                    marginLeft='auto'\n                    marginRight='auto'>\n                        Register\n                    </Button>\n                </Form>\n            )}\n        </Formik>\n    </Flex>\n);\n};\n\nRegistrForm.propTypes = {\n    handleSubmit: PropTypes.func,\n};\n\nexport default RegistrForm;","import RegisterForm from 'components/RegisterForm';\nimport { useSelector } from 'react-redux';\nimport { Flex, Heading, Box, Text } from '@chakra-ui/react';\n\nimport { selectError } from 'redux/auth/selectors';\n\nconst Register = () => {\n    const error = useSelector(selectError);\n\n   return <Flex direction='column' align='center'>\n        <Heading as='h2' mt={20} mb={30}\n            fontSize='48'\n            fontWeight='medium'\n            textAlign='center' noOfLines={1}>\n            RegistrForm\n        </Heading>\n        <RegisterForm />\n        <Box mt={10} h={30}>\n            {error === 'User creation error' && (\n            <Text fontSize='md' color='red'>\n                User is already registered.\n            </Text>)}\n        </Box>\n    </Flex>\n}\n\nexport default Register;","import {\n  useFormControlContext\n} from \"./chunk-PXXQR4UW.mjs\";\n\n// src/form-error.tsx\nimport { Icon } from \"@chakra-ui/icon\";\nimport { createContext } from \"@chakra-ui/react-context\";\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useMultiStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar [FormErrorStylesProvider, useFormErrorStyles] = createContext({\n  name: `FormErrorStylesContext`,\n  errorMessage: `useFormErrorStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormError />\" `\n});\nvar FormErrorMessage = forwardRef(\n  (props, ref) => {\n    const styles = useMultiStyleConfig(\"FormError\", props);\n    const ownProps = omitThemingProps(props);\n    const field = useFormControlContext();\n    if (!(field == null ? void 0 : field.isInvalid))\n      return null;\n    return /* @__PURE__ */ jsx(FormErrorStylesProvider, { value: styles, children: /* @__PURE__ */ jsx(\n      chakra.div,\n      {\n        ...field == null ? void 0 : field.getErrorMessageProps(ownProps, ref),\n        className: cx(\"chakra-form__error-message\", props.className),\n        __css: {\n          display: \"flex\",\n          alignItems: \"center\",\n          ...styles.text\n        }\n      }\n    ) });\n  }\n);\nFormErrorMessage.displayName = \"FormErrorMessage\";\nvar FormErrorIcon = forwardRef((props, ref) => {\n  const styles = useFormErrorStyles();\n  const field = useFormControlContext();\n  if (!(field == null ? void 0 : field.isInvalid))\n    return null;\n  const _className = cx(\"chakra-form__error-icon\", props.className);\n  return /* @__PURE__ */ jsx(\n    Icon,\n    {\n      ref,\n      \"aria-hidden\": true,\n      ...props,\n      __css: styles.icon,\n      className: _className,\n      children: /* @__PURE__ */ jsx(\n        \"path\",\n        {\n          fill: \"currentColor\",\n          d: \"M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z\"\n        }\n      )\n    }\n  );\n});\nFormErrorIcon.displayName = \"FormErrorIcon\";\n\nexport {\n  useFormErrorStyles,\n  FormErrorMessage,\n  FormErrorIcon\n};\n"],"names":["initialValues","name","email","password","schema","yup","shape","required","dispatch","useDispatch","direction","align","w","h","p","border","borderColor","backgroundColor","borderStyle","borderRadius","validationSchema","onSubmit","values","resetForm","register","props","type","field","form","isInvalid","errors","I","autoComplete","color","placeholder","_placeholder","opacity","pattern","fontSize","fontWeight","display","marginLeft","marginRight","error","useSelector","selectError","as","mt","mb","textAlign","noOfLines","createContext","errorMessage","FormErrorStylesProvider","useFormErrorStyles","FormErrorMessage","forwardRef","ref","styles","useMultiStyleConfig","ownProps","omitThemingProps","useFormControlContext","jsx","value","children","chakra","getErrorMessageProps","className","cx","__css","alignItems","text","displayName","_className","Icon","icon","fill","d"],"sourceRoot":""}