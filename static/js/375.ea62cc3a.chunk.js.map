{"version":3,"file":"static/js/375.ea62cc3a.chunk.js","mappings":"0RAcMA,EAAgB,CAClBC,MAAO,GACPC,SAAU,IAGRC,EAASC,EAAAA,KAAaC,MAAM,CAC9BJ,MAAOG,EAAAA,KAAaH,QAAQK,WAC5BJ,SAAUE,EAAAA,KAAaE,aAmF3B,EAhFkB,WACd,IAAMC,GAAWC,EAAAA,EAAAA,MAMnB,OACE,SAAC,IAAD,CAAMC,UAAU,SACRC,MAAM,SACNC,EAAG,IAAKC,EAAG,IAAKC,EAAG,EACnBC,OAAQ,EACRC,YAAY,UACZC,gBAAgB,UAChBC,YAAY,QACZC,aAAc,GAPtB,UASQ,SAAC,KAAD,CACIlB,cAAeA,EACfmB,iBAAkBhB,EAClBiB,SAlBS,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAC5Bf,GAASgB,EAAAA,EAAAA,IAAMF,IACfC,GACH,EAYO,SAKK,SAACE,GAAD,OACG,UAAC,KAAD,YACI,SAAC,KAAD,CAAOC,KAAK,QAAQC,KAAK,QAAQpB,UAAQ,EAAzC,SACK,gBAAGqB,EAAH,EAAGA,MAAH,EAAUC,KAAV,OACO,SAAC,KAAD,CAAajB,EAAE,QAAf,UACA,SAAC,EAAAkB,GAAD,kBAAWF,GAAX,IACIG,aAAa,MACbd,gBAAgB,UAChBD,YAAY,UACZgB,aAAa,KACbC,aAAc,CACVC,QAAS,GACTC,MAAO,WAEXC,YAAY,QACZD,MAAM,cAZjB,KAkBL,SAAC,KAAD,CAAOT,KAAK,WAAWC,KAAK,WAAWpB,UAAQ,EAA/C,SACK,gBAAGqB,EAAH,EAAGA,MAAH,EAAUC,KAAV,OACG,SAAC,KAAD,CAAajB,EAAE,QAAf,UACI,SAAC,EAAAkB,GAAD,kBAAWF,GAAX,IACIG,aAAa,MACbd,gBAAgB,UAChBD,YAAY,UACZiB,aAAc,CACVC,QAAS,GACTC,MAAO,WACXC,YAAY,WACZD,MAAM,cAVjB,KAeL,SAAC,IAAD,CAAQrB,EAAG,EAAGuB,GAAI,EACdzB,EAAG,IACH0B,QAAQ,QACRC,WAAW,OACXC,YAAY,OACZC,WAAW,OACXf,KAAK,SAASC,KAAK,SANvB,sBArCP,KAkDhB,E,uCCvED,EAnBc,WACV,IAAMe,GAAQC,EAAAA,EAAAA,IAAYC,EAAAA,IAE5B,OAAO,UAAC,IAAD,CAAMlC,UAAU,SAASC,MAAM,SAA/B,WACD,SAAC,IAAD,CAASkC,GAAG,KAAKC,GAAI,GAAIC,GAAI,GACzBC,SAAS,KACTP,WAAW,SACXQ,UAAU,SAASC,UAAW,EAHlC,qBAMA,SAAC,EAAD,KACA,SAAC,KAAD,CAAKJ,GAAI,GAAIjC,EAAG,GAAhB,SACe,gBAAV6B,IACO,SAAC,IAAD,CAAMM,SAAS,KAAKb,MAAM,MAA1B,SAAiCO,QAIpD,C","sources":["components/LoginForm/LoginForm.jsx","pages/Login/Login.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\n\nimport { useDispatch } from 'react-redux';\nimport { Formik, Form, Field } from 'formik';\nimport * as yup from 'yup';\nimport {\n  Button,\n  Input,\n  Flex,\n  FormControl,\n} from '@chakra-ui/react';\n\nimport { logIn } from 'redux/auth/operation';\n\nconst initialValues = {\n    email: '',\n    password: ''\n};\n\nconst schema = yup.object().shape({\n    email: yup.string().email().required(),\n    password: yup.string().required(),\n});\n\nconst LoginForm = () => {\n    const dispatch = useDispatch();\n    const handleSubmit = (values, { resetForm }) => {\n        dispatch(logIn(values));\n        resetForm();\n    };\n\n  return (\n    <Flex direction='column'\n            align='center'\n            w={380} h={185} p={3}\n            border={2}\n            borderColor='#2D3748'\n            backgroundColor='#9fa2a6'\n            borderStyle='solid'\n            borderRadius={10}\n        >\n            <Formik\n                initialValues={initialValues}\n                validationSchema={schema}\n                onSubmit={handleSubmit}\n            >\n                {(props) => (\n                    <Form>\n                        <Field type='email' name='email' required>\n                            {({ field, form }) => (\n                                    <FormControl w='355px'>\n                                    <Input {...field}\n                                        autoComplete='off'\n                                        backgroundColor='#EDF2F7'\n                                        borderColor='#2D3748'\n                                        marginBottom='15'\n                                        _placeholder={{\n                                            opacity: 0.4,\n                                            color: '#2D3748'\n                                        }}\n                                        placeholder='Email'\n                                        color='#2D3748'\n                                    />\n                                    </FormControl>\n                                )\n                            }\n                        </Field>\n                        <Field type='password' name='password' required>\n                            {({ field, form }) => (\n                                <FormControl w='355px'>\n                                    <Input {...field}\n                                        autoComplete='off'\n                                        backgroundColor='#EDF2F7'\n                                        borderColor='#2D3748'\n                                        _placeholder={{\n                                            opacity: 0.4,\n                                            color: '#2D3748' }}\n                                        placeholder='Password'\n                                        color='#2D3748'\n                                    />\n                                </FormControl>\n                            )}\n                        </Field>\n                        <Button p={2} my={5}\n                            w={100} \n                            display=\"block\"\n                            marginLeft='auto'\n                            marginRight='auto'\n                            fontWeight='bold'\n                            type='submit' name='Log in'>Log in\n                        </Button>\n                    </Form>\n                )}\n            </Formik>\n        </Flex>\n    );\n};\n\nLoginForm.propTypes = {\n    handleSubmit: PropTypes.func,\n    field: PropTypes.object,\n    form: PropTypes.object,\n};\n\nexport default LoginForm;","import LoginForm from 'components/LoginForm';\nimport { useSelector } from 'react-redux';\nimport { Flex, Heading, Box, Text } from '@chakra-ui/react';\n\nimport { selectError } from 'redux/auth/selectors';\n\nconst Login = () => {\n    const error = useSelector(selectError);\n\n  return <Flex direction='column' align='center'>\n        <Heading as='h2' mt={20} mb={30}\n            fontSize='48'\n            fontWeight='medium'\n            textAlign='center' noOfLines={1}>\n            Log In\n        </Heading>\n        <LoginForm />\n        <Box mt={10} h={30}>\n            {error === 'Login error'\n                && (<Text fontSize='md' color='red'>{error}</Text>\n            )}\n        </Box>\n    </Flex>\n}\n\nexport default Login;"],"names":["initialValues","email","password","schema","yup","shape","required","dispatch","useDispatch","direction","align","w","h","p","border","borderColor","backgroundColor","borderStyle","borderRadius","validationSchema","onSubmit","values","resetForm","logIn","props","type","name","field","form","I","autoComplete","marginBottom","_placeholder","opacity","color","placeholder","my","display","marginLeft","marginRight","fontWeight","error","useSelector","selectError","as","mt","mb","fontSize","textAlign","noOfLines"],"sourceRoot":""}